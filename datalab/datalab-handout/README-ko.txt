***********************
CS:APP 데이터랩
학생을 위한 안내서
***********************

여러분의 목표는 코딩 가이드라인을 위반하지 않으면서 btest의
모든 테스트를 통과하도록 bits.c 파일을 수정하는 것입니다.


*********
0. 파일:
*********

Makefile - btest, fshow 및 ishow를 만듭니다.
README-ko - 이 파일
bits.c - 수정하여 제출할 파일
bits.h - 헤더 파일
btest.c - 메인 btest 프로그램
  btest.h - btest 빌드에 사용되는 파일
  decl.c - btest 빌드에 사용되는 파일
  tests.c - btest 빌드에 사용되는 파일
  tests-header.c - btest 빌드에 사용되는 파일
dlc* - 규칙 검사 컴파일러 바이너리(데이터랩 컴파일러)	 
driver.pl* - btest 및 dlc를 사용하여 bits.c를 자동 채점하는 드라이버 프로그램
Driverhdrs.pm - 선택사항 과제인 "교수를 이겨라"를 위한 헤더 파일
fshow.c - 부동소수점 표현을 검사하는 유틸리티
ishow.c - 정수 표현을 검사하는 유틸리티

***********************************************************
1. bits.c 수정 및 dlc 컴파일러 규정 준수 여부 확인
***********************************************************

중요: 시작하기 전에 bits.c 파일의 지침을 주의 깊게 읽으세요.
여기에는 만점을 받으려면 따라야 할 코딩 규칙이 나와 있습니다.


dlc 컴파일러(./dlc)를 사용하여 여러분의 bits.c 파일이
코딩 가이드라인을 준수하는지 확인할 수 있습니다:

       UNIX> ./dlc bits.c

코드에 문제가 없으면 dlc는 아무것도 리턴하지 않습니다.
그렇지 않으면 문제를 표시하는 메시지를 출력합니다.  
dlc를 -e 플래그와 함께 실행하면,

    	unix> ./dlc -e bits.c  

각 함수에 사용된 연산자 수를 출력합니다.

규정을 만족하는 솔루션을 찾았다면 ./btest 프로그램을 사용하여
솔루션이 정답인지 테스트할 수 있습니다.

*********************
2. btest로 테스트하기
*********************

이 폴더에 있는 Makefile은 여러분의 bits.c 파일을 추가적인 코드와 함께
컴파일하여 btest라는 프로그램을 생성합니다. 

btest 프로그램을 컴파일하고 실행하려면 다음과 같이 입력합니다:

    unix> make btest
    unix> ./btest [선택적 인자]

bits.c를 수정할 때마다 btest를 다시 컴파일해야 합니다.
한 플랫폼에서 다른 플랫폼으로 이동할 때는 이전 버전의 btest를 제거하고 
새 버전을 생성해야 합니다. 이때 다음 명령을 사용하세요:

    unix> make clean
    unix> make btest

btest는 각 함수에 대해 수백만 개의 테스트를 실행하여 여러분의 코드가 정확한지 테스트합니다.  
정수 퍼즐의 경우 Tmin이나 0과 같은 잘 알려진 코너 케이스를 테스트하고, 
부동소수점 퍼즐의 경우 0, inf, 정규화된 숫자와 비정규화된 숫자의 경계에 해당하는 숫자를 테스트합니다. 
btest가 여러분의 함수에서 오류를 감지하면, 실패한 테스트, 잘못된 결과, 그리고 예상되는 결과를
출력한 다음 해당 함수에 대한 테스트를 종료합니다.

다음은 btest에 대한 커맨드라인 옵션입니다:

  unix> ./btest -h
  사용법 ./btest [-hg] [-r <n>] [-f <name> [-1|-2|-3 <val>]*] [-T <time limit>]
    -1 <val>  첫 번째 함수 인자를 지정합니다
    -2 <val>  두 번째 함수 인자를 지정합니다
    -3 <val>  세 번째 함수 인수를 지정합니다
    -f <name> 이름이 주어진 함수만 테스트합니다
    -g        자동 채점할때 오류 메세지를 표시하지 않습니다
    -h        이 메시지를 프린트합니다
    -r <n>    모든 문제에 균일한 가중치 n을 부여합니다.
    -T <lim>  시간 제한을 lim으로 설정합니다.

예제:

  모든 함수가 정확한지 테스트하고 오류 메시지를 출력합니다:
  UNIX> ./btest

  모든 함수를 오류 메시지 없이 간결한 형태로 테스트합니다:
  unix> ./btest -g

  함수 foo가 정확한지 테스트합니다:
  unix> ./btest -f foo

  특정 인자들을 보내 함수 foo가 정확한지 테스트합니다:
  unix> ./btest -f foo -1 27 -2 0xf

btest는 코드가 가이드라인을 준수하는지 확인하지 않습니다.
확인하려면 dlc를 사용하세요. 

*******************
3. 도우미 프로그램
*******************

우리는 여러분을 위해 정수 및 부동소수점 표현을 해독하는 데 도움이 되는 ishow 및 fshow 프로그램을 포함했습니다. 
각각 단일 10진수 또는 16진수를 인자로 받습니다. 사용하려면 다음과 같이 입력합니다:

    unix> make

사용 예

    unix> ./ishow 0x27
    Hex = 0x00000027, Signed = 39, Unsigned = 39

    unix> ./ishow 27
    Hex = 0x0000001b, Signed = 27, Unsigned = 27

    unix> ./fshow 0x15213243
    Floating point value 3.255334057e-26
    Bit Representation 0x15213243, Sign = 0, exponent = 0x2a, fraction = 0x213243
    Normalized.  +1.2593463659 X 2^(-85)

    linux> ./fshow 15213243
    Floating point value 2.131829405e-38
    Bit Representation 0x00e822bb, sign = 0, exponent = 0x01, fraction = 0x6822bb
    Normalized.  +1.8135598898 X 2^(-126)


